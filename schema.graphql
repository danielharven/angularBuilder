# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

union Morph = District | DistrictAggregator | DistrictConnection | DistrictConnectionCreatedAt | DistrictConnectionId | DistrictConnectionLabel | DistrictConnectionProvince | DistrictConnectionPublished_at | DistrictConnectionUpdatedAt | DistrictConnection_id | DistrictGroupBy | Download | DownloadAggregator | DownloadConnection | DownloadConnectionCreatedAt | DownloadConnectionId | DownloadConnectionUpdatedAt | DownloadConnection_id | DownloadGroupBy | Nrc | NrcAggregator | NrcConnection | NrcConnectionApproved | NrcConnectionConfirmed | NrcConnectionCreatedAt | NrcConnectionDistrict | NrcConnectionDob | NrcConnectionDor | NrcConnectionGender | NrcConnectionId | NrcConnectionNames | NrcConnectionNrc | NrcConnectionPic_id1 | NrcConnectionPic_id2 | NrcConnectionUpdatedAt | NrcConnectionVillage | NrcConnection_id | NrcGroupBy | Province | ProvinceAggregator | ProvinceConnection | ProvinceConnectionCreatedAt | ProvinceConnectionId | ProvinceConnectionName | ProvinceConnectionPublished_at | ProvinceConnectionUpdatedAt | ProvinceConnection_id | ProvinceGroupBy | UploadFile | UploadFileAggregator | UploadFileAggregatorAvg | UploadFileAggregatorMax | UploadFileAggregatorMin | UploadFileAggregatorSum | UploadFileConnection | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionCreatedAt | UploadFileConnectionExt | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionHeight | UploadFileConnectionId | UploadFileConnectionMime | UploadFileConnectionName | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | UploadFileConnectionSize | UploadFileConnectionUpdatedAt | UploadFileConnectionUrl | UploadFileConnectionWidth | UploadFileConnection_id | UploadFileGroupBy | UploadedDocuments | UploadedDocumentsAggregator | UploadedDocumentsConnection | UploadedDocumentsConnectionCreatedAt | UploadedDocumentsConnectionId | UploadedDocumentsConnectionPublished_at | UploadedDocumentsConnectionUpdatedAt | UploadedDocumentsConnection_id | UploadedDocumentsGroupBy | UserPermissionsPasswordPayload | UsersPermissionsLoginPayload | UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleAggregator | UsersPermissionsRoleConnection | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionType | UsersPermissionsRoleConnection_id | UsersPermissionsRoleGroupBy | UsersPermissionsUser | UsersPermissionsUserAggregator | UsersPermissionsUserConnection | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionCreatedAt | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionUpdatedAt | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnection_id | UsersPermissionsUserGroupBy | createDistrictPayload | createDownloadPayload | createNrcPayload | createProvincePayload | createRolePayload | createUploadedDocumentPayload | createUserPayload | deleteDistrictPayload | deleteDownloadPayload | deleteFilePayload | deleteNrcPayload | deleteProvincePayload | deleteRolePayload | deleteUploadedDocumentPayload | deleteUserPayload | updateDistrictPayload | updateDownloadPayload | updateNrcPayload | updateProvincePayload | updateRolePayload | updateUploadedDocumentPayload | updateUserPayload

type AdminUser {
    firstname: String!
    id: ID!
    lastname: String!
    username: String
}

type District {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    label: String
    province: Province
    published_at: DateTime
    updatedAt: DateTime!
}

type DistrictAggregator {
    count: Int
    totalCount: Int
}

type DistrictConnection {
    aggregate: DistrictAggregator
    groupBy: DistrictGroupBy
    values: [District]
}

type DistrictConnectionCreatedAt {
    connection: DistrictConnection
    key: DateTime
}

type DistrictConnectionId {
    connection: DistrictConnection
    key: ID
}

type DistrictConnectionLabel {
    connection: DistrictConnection
    key: String
}

type DistrictConnectionProvince {
    connection: DistrictConnection
    key: ID
}

type DistrictConnectionPublished_at {
    connection: DistrictConnection
    key: DateTime
}

type DistrictConnectionUpdatedAt {
    connection: DistrictConnection
    key: DateTime
}

type DistrictConnection_id {
    connection: DistrictConnection
    key: ID
}

type DistrictGroupBy {
    _id: [DistrictConnection_id]
    createdAt: [DistrictConnectionCreatedAt]
    id: [DistrictConnectionId]
    label: [DistrictConnectionLabel]
    province: [DistrictConnectionProvince]
    published_at: [DistrictConnectionPublished_at]
    updatedAt: [DistrictConnectionUpdatedAt]
}

type Download {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime!
}

type DownloadAggregator {
    count: Int
    totalCount: Int
}

type DownloadConnection {
    aggregate: DownloadAggregator
    groupBy: DownloadGroupBy
    values: [Download]
}

type DownloadConnectionCreatedAt {
    connection: DownloadConnection
    key: DateTime
}

type DownloadConnectionId {
    connection: DownloadConnection
    key: ID
}

type DownloadConnectionUpdatedAt {
    connection: DownloadConnection
    key: DateTime
}

type DownloadConnection_id {
    connection: DownloadConnection
    key: ID
}

type DownloadGroupBy {
    _id: [DownloadConnection_id]
    createdAt: [DownloadConnectionCreatedAt]
    id: [DownloadConnectionId]
    updatedAt: [DownloadConnectionUpdatedAt]
}

type Mutation {
    createDistrict(input: createDistrictInput): createDistrictPayload
    createDownload(input: createDownloadInput): createDownloadPayload
    createNrc(input: createNrcInput): createNrcPayload
    createProvince(input: createProvinceInput): createProvincePayload
    "Create a new role"
    createRole(input: createRoleInput): createRolePayload
    createUploadedDocument(input: createUploadedDocumentInput): createUploadedDocumentPayload
    "Create a new user"
    createUser(input: createUserInput): createUserPayload
    deleteDistrict(input: deleteDistrictInput): deleteDistrictPayload
    deleteDownload(input: deleteDownloadInput): deleteDownloadPayload
    "Delete one file"
    deleteFile(input: deleteFileInput): deleteFilePayload
    deleteNrc(input: deleteNrcInput): deleteNrcPayload
    deleteProvince(input: deleteProvinceInput): deleteProvincePayload
    "Delete an existing role"
    deleteRole(input: deleteRoleInput): deleteRolePayload
    deleteUploadedDocument(input: deleteUploadedDocumentInput): deleteUploadedDocumentPayload
    "Delete an existing user"
    deleteUser(input: deleteUserInput): deleteUserPayload
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
    forgotPassword(email: String!): UserPermissionsPasswordPayload
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
    multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID, source: String): [UploadFile]!
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
    resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
    updateDistrict(input: updateDistrictInput): updateDistrictPayload
    updateDownload(input: updateDownloadInput): updateDownloadPayload
    updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
    updateNrc(input: updateNrcInput): updateNrcPayload
    updateProvince(input: updateProvinceInput): updateProvincePayload
    "Update an existing role"
    updateRole(input: updateRoleInput): updateRolePayload
    updateUploadedDocument(input: updateUploadedDocumentInput): updateUploadedDocumentPayload
    "Update an existing user"
    updateUser(input: updateUserInput): updateUserPayload
    upload(field: String, file: Upload!, ref: String, refId: ID, source: String): UploadFile!
}

type Nrc {
    _id: ID!
    approved: Boolean
    confirmed: Boolean
    createdAt: DateTime!
    district: District
    dob: DateTime
    dor: DateTime
    gender: String
    id: ID!
    names: String
    nrc: String
    pic_id1: String
    pic_id2: String
    updatedAt: DateTime!
    village: String
}

type NrcAggregator {
    count: Int
    totalCount: Int
}

type NrcConnection {
    aggregate: NrcAggregator
    groupBy: NrcGroupBy
    values: [Nrc]
}

type NrcConnectionApproved {
    connection: NrcConnection
    key: Boolean
}

type NrcConnectionConfirmed {
    connection: NrcConnection
    key: Boolean
}

type NrcConnectionCreatedAt {
    connection: NrcConnection
    key: DateTime
}

type NrcConnectionDistrict {
    connection: NrcConnection
    key: ID
}

type NrcConnectionDob {
    connection: NrcConnection
    key: DateTime
}

type NrcConnectionDor {
    connection: NrcConnection
    key: DateTime
}

type NrcConnectionGender {
    connection: NrcConnection
    key: String
}

type NrcConnectionId {
    connection: NrcConnection
    key: ID
}

type NrcConnectionNames {
    connection: NrcConnection
    key: String
}

type NrcConnectionNrc {
    connection: NrcConnection
    key: String
}

type NrcConnectionPic_id1 {
    connection: NrcConnection
    key: String
}

type NrcConnectionPic_id2 {
    connection: NrcConnection
    key: String
}

type NrcConnectionUpdatedAt {
    connection: NrcConnection
    key: DateTime
}

type NrcConnectionVillage {
    connection: NrcConnection
    key: String
}

type NrcConnection_id {
    connection: NrcConnection
    key: ID
}

type NrcGroupBy {
    _id: [NrcConnection_id]
    approved: [NrcConnectionApproved]
    confirmed: [NrcConnectionConfirmed]
    createdAt: [NrcConnectionCreatedAt]
    district: [NrcConnectionDistrict]
    dob: [NrcConnectionDob]
    dor: [NrcConnectionDor]
    gender: [NrcConnectionGender]
    id: [NrcConnectionId]
    names: [NrcConnectionNames]
    nrc: [NrcConnectionNrc]
    pic_id1: [NrcConnectionPic_id1]
    pic_id2: [NrcConnectionPic_id2]
    updatedAt: [NrcConnectionUpdatedAt]
    village: [NrcConnectionVillage]
}

type Province {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    name: String!
    published_at: DateTime
    updatedAt: DateTime!
}

type ProvinceAggregator {
    count: Int
    totalCount: Int
}

type ProvinceConnection {
    aggregate: ProvinceAggregator
    groupBy: ProvinceGroupBy
    values: [Province]
}

type ProvinceConnectionCreatedAt {
    connection: ProvinceConnection
    key: DateTime
}

type ProvinceConnectionId {
    connection: ProvinceConnection
    key: ID
}

type ProvinceConnectionName {
    connection: ProvinceConnection
    key: String
}

type ProvinceConnectionPublished_at {
    connection: ProvinceConnection
    key: DateTime
}

type ProvinceConnectionUpdatedAt {
    connection: ProvinceConnection
    key: DateTime
}

type ProvinceConnection_id {
    connection: ProvinceConnection
    key: ID
}

type ProvinceGroupBy {
    _id: [ProvinceConnection_id]
    createdAt: [ProvinceConnectionCreatedAt]
    id: [ProvinceConnectionId]
    name: [ProvinceConnectionName]
    published_at: [ProvinceConnectionPublished_at]
    updatedAt: [ProvinceConnectionUpdatedAt]
}

type Query {
    district(id: ID!, publicationState: PublicationState): District
    districts(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [District]
    districtsConnection(limit: Int, sort: String, start: Int, where: JSON): DistrictConnection
    download(id: ID!, publicationState: PublicationState): Download
    downloads(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Download]
    downloadsConnection(limit: Int, sort: String, start: Int, where: JSON): DownloadConnection
    files(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadFile]
    filesConnection(limit: Int, sort: String, start: Int, where: JSON): UploadFileConnection
    me: UsersPermissionsMe
    nrc(id: ID!, publicationState: PublicationState): Nrc
    nrcs(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Nrc]
    nrcsConnection(limit: Int, sort: String, start: Int, where: JSON): NrcConnection
    province(id: ID!, publicationState: PublicationState): Province
    provinces(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [Province]
    provincesConnection(limit: Int, sort: String, start: Int, where: JSON): ProvinceConnection
    role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
    "Retrieve all the existing roles. You can't apply filters on this query."
    roles(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsRole]
    rolesConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsRoleConnection
    uploadedDocument(id: ID!, publicationState: PublicationState): UploadedDocuments
    uploadedDocuments(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UploadedDocuments]
    uploadedDocumentsConnection(limit: Int, sort: String, start: Int, where: JSON): UploadedDocumentsConnection
    user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
    users(limit: Int, publicationState: PublicationState, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
    usersConnection(limit: Int, sort: String, start: Int, where: JSON): UsersPermissionsUserConnection
}

type UploadFile {
    _id: ID!
    alternativeText: String
    caption: String
    createdAt: DateTime!
    ext: String
    formats: JSON
    hash: String!
    height: Int
    id: ID!
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related(limit: Int, sort: String, start: Int, where: JSON): [Morph]
    size: Float!
    updatedAt: DateTime!
    url: String!
    width: Int
}

type UploadFileAggregator {
    avg: UploadFileAggregatorAvg
    count: Int
    max: UploadFileAggregatorMax
    min: UploadFileAggregatorMin
    sum: UploadFileAggregatorSum
    totalCount: Int
}

type UploadFileAggregatorAvg {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMax {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorMin {
    height: Float
    size: Float
    width: Float
}

type UploadFileAggregatorSum {
    height: Float
    size: Float
    width: Float
}

type UploadFileConnection {
    aggregate: UploadFileAggregator
    groupBy: UploadFileGroupBy
    values: [UploadFile]
}

type UploadFileConnectionAlternativeText {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCaption {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionCreatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionExt {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionFormats {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionHash {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionHeight {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnectionId {
    connection: UploadFileConnection
    key: ID
}

type UploadFileConnectionMime {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionName {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionPreviewUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionProvider_metadata {
    connection: UploadFileConnection
    key: JSON
}

type UploadFileConnectionSize {
    connection: UploadFileConnection
    key: Float
}

type UploadFileConnectionUpdatedAt {
    connection: UploadFileConnection
    key: DateTime
}

type UploadFileConnectionUrl {
    connection: UploadFileConnection
    key: String
}

type UploadFileConnectionWidth {
    connection: UploadFileConnection
    key: Int
}

type UploadFileConnection_id {
    connection: UploadFileConnection
    key: ID
}

type UploadFileGroupBy {
    _id: [UploadFileConnection_id]
    alternativeText: [UploadFileConnectionAlternativeText]
    caption: [UploadFileConnectionCaption]
    createdAt: [UploadFileConnectionCreatedAt]
    ext: [UploadFileConnectionExt]
    formats: [UploadFileConnectionFormats]
    hash: [UploadFileConnectionHash]
    height: [UploadFileConnectionHeight]
    id: [UploadFileConnectionId]
    mime: [UploadFileConnectionMime]
    name: [UploadFileConnectionName]
    previewUrl: [UploadFileConnectionPreviewUrl]
    provider: [UploadFileConnectionProvider]
    provider_metadata: [UploadFileConnectionProvider_metadata]
    size: [UploadFileConnectionSize]
    updatedAt: [UploadFileConnectionUpdatedAt]
    url: [UploadFileConnectionUrl]
    width: [UploadFileConnectionWidth]
}

type UploadedDocuments {
    _id: ID!
    createdAt: DateTime!
    id: ID!
    name(limit: Int, sort: String, start: Int, where: JSON): [UploadFile]
    published_at: DateTime
    updatedAt: DateTime!
}

type UploadedDocumentsAggregator {
    count: Int
    totalCount: Int
}

type UploadedDocumentsConnection {
    aggregate: UploadedDocumentsAggregator
    groupBy: UploadedDocumentsGroupBy
    values: [UploadedDocuments]
}

type UploadedDocumentsConnectionCreatedAt {
    connection: UploadedDocumentsConnection
    key: DateTime
}

type UploadedDocumentsConnectionId {
    connection: UploadedDocumentsConnection
    key: ID
}

type UploadedDocumentsConnectionPublished_at {
    connection: UploadedDocumentsConnection
    key: DateTime
}

type UploadedDocumentsConnectionUpdatedAt {
    connection: UploadedDocumentsConnection
    key: DateTime
}

type UploadedDocumentsConnection_id {
    connection: UploadedDocumentsConnection
    key: ID
}

type UploadedDocumentsGroupBy {
    _id: [UploadedDocumentsConnection_id]
    createdAt: [UploadedDocumentsConnectionCreatedAt]
    id: [UploadedDocumentsConnectionId]
    published_at: [UploadedDocumentsConnectionPublished_at]
    updatedAt: [UploadedDocumentsConnectionUpdatedAt]
}

type UserPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsMe {
    blocked: Boolean
    confirmed: Boolean
    email: String!
    id: ID!
    role: UsersPermissionsMeRole
    username: String!
}

type UsersPermissionsMeRole {
    description: String
    id: ID!
    name: String!
    type: String
}

type UsersPermissionsPermission {
    _id: ID!
    action: String!
    controller: String!
    enabled: Boolean!
    id: ID!
    policy: String
    role: UsersPermissionsRole
    type: String!
}

type UsersPermissionsRole {
    _id: ID!
    description: String
    id: ID!
    name: String!
    permissions(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsPermission]
    type: String
    users(limit: Int, sort: String, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsRoleConnection {
    aggregate: UsersPermissionsRoleAggregator
    groupBy: UsersPermissionsRoleGroupBy
    values: [UsersPermissionsRole]
}

type UsersPermissionsRoleConnectionDescription {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionId {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleConnectionName {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnectionType {
    connection: UsersPermissionsRoleConnection
    key: String
}

type UsersPermissionsRoleConnection_id {
    connection: UsersPermissionsRoleConnection
    key: ID
}

type UsersPermissionsRoleGroupBy {
    _id: [UsersPermissionsRoleConnection_id]
    description: [UsersPermissionsRoleConnectionDescription]
    id: [UsersPermissionsRoleConnectionId]
    name: [UsersPermissionsRoleConnectionName]
    type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
    _id: ID!
    blocked: Boolean
    confirmed: Boolean
    createdAt: DateTime!
    email: String!
    id: ID!
    provider: String
    role: UsersPermissionsRole
    updatedAt: DateTime!
    username: String!
}

type UsersPermissionsUserAggregator {
    count: Int
    totalCount: Int
}

type UsersPermissionsUserConnection {
    aggregate: UsersPermissionsUserAggregator
    groupBy: UsersPermissionsUserGroupBy
    values: [UsersPermissionsUser]
}

type UsersPermissionsUserConnectionBlocked {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionConfirmed {
    connection: UsersPermissionsUserConnection
    key: Boolean
}

type UsersPermissionsUserConnectionCreatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionEmail {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionId {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionProvider {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnectionRole {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserConnectionUpdatedAt {
    connection: UsersPermissionsUserConnection
    key: DateTime
}

type UsersPermissionsUserConnectionUsername {
    connection: UsersPermissionsUserConnection
    key: String
}

type UsersPermissionsUserConnection_id {
    connection: UsersPermissionsUserConnection
    key: ID
}

type UsersPermissionsUserGroupBy {
    _id: [UsersPermissionsUserConnection_id]
    blocked: [UsersPermissionsUserConnectionBlocked]
    confirmed: [UsersPermissionsUserConnectionConfirmed]
    createdAt: [UsersPermissionsUserConnectionCreatedAt]
    email: [UsersPermissionsUserConnectionEmail]
    id: [UsersPermissionsUserConnectionId]
    provider: [UsersPermissionsUserConnectionProvider]
    role: [UsersPermissionsUserConnectionRole]
    updatedAt: [UsersPermissionsUserConnectionUpdatedAt]
    username: [UsersPermissionsUserConnectionUsername]
}

type createDistrictPayload {
    district: District
}

type createDownloadPayload {
    download: Download
}

type createNrcPayload {
    nrc: Nrc
}

type createProvincePayload {
    province: Province
}

type createRolePayload {
    role: UsersPermissionsRole
}

type createUploadedDocumentPayload {
    uploadedDocument: UploadedDocuments
}

type createUserPayload {
    user: UsersPermissionsUser
}

type deleteDistrictPayload {
    district: District
}

type deleteDownloadPayload {
    download: Download
}

type deleteFilePayload {
    file: UploadFile
}

type deleteNrcPayload {
    nrc: Nrc
}

type deleteProvincePayload {
    province: Province
}

type deleteRolePayload {
    role: UsersPermissionsRole
}

type deleteUploadedDocumentPayload {
    uploadedDocument: UploadedDocuments
}

type deleteUserPayload {
    user: UsersPermissionsUser
}

type updateDistrictPayload {
    district: District
}

type updateDownloadPayload {
    download: Download
}

type updateNrcPayload {
    nrc: Nrc
}

type updateProvincePayload {
    province: Province
}

type updateRolePayload {
    role: UsersPermissionsRole
}

type updateUploadedDocumentPayload {
    uploadedDocument: UploadedDocuments
}

type updateUserPayload {
    user: UsersPermissionsUser
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum PublicationState {
    LIVE
    PREVIEW
}

input DistrictInput {
    created_by: ID
    label: String
    province: ID
    published_at: DateTime
    updated_by: ID
}

input DownloadInput {
    created_by: ID
    updated_by: ID
}

input FileInfoInput {
    alternativeText: String
    caption: String
    name: String
}

input FileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String!
    height: Int
    mime: String!
    name: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [ID]
    size: Float!
    updated_by: ID
    url: String!
    width: Int
}

input InputID {
    id: ID!
}

input NrcInput {
    approved: Boolean
    confirmed: Boolean
    created_by: ID
    district: ID
    dob: DateTime
    dor: DateTime
    gender: String
    names: String
    nrc: String
    pic_id1: String
    pic_id2: String
    updated_by: ID
    village: String
}

input ProvinceInput {
    created_by: ID
    name: String!
    published_at: DateTime
    updated_by: ID
}

input RoleInput {
    created_by: ID
    description: String
    name: String!
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input UploadedDocumentInput {
    created_by: ID
    name: [ID]
    published_at: DateTime
    updated_by: ID
}

input UserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String!
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String = "local"
}

input UsersPermissionsRegisterInput {
    email: String!
    password: String!
    username: String!
}

input createDistrictInput {
    data: DistrictInput
}

input createDownloadInput {
    data: DownloadInput
}

input createNrcInput {
    data: NrcInput
}

input createProvinceInput {
    data: ProvinceInput
}

input createRoleInput {
    data: RoleInput
}

input createUploadedDocumentInput {
    data: UploadedDocumentInput
}

input createUserInput {
    data: UserInput
}

input deleteDistrictInput {
    where: InputID
}

input deleteDownloadInput {
    where: InputID
}

input deleteFileInput {
    where: InputID
}

input deleteNrcInput {
    where: InputID
}

input deleteProvinceInput {
    where: InputID
}

input deleteRoleInput {
    where: InputID
}

input deleteUploadedDocumentInput {
    where: InputID
}

input deleteUserInput {
    where: InputID
}

input editDistrictInput {
    created_by: ID
    label: String
    province: ID
    published_at: DateTime
    updated_by: ID
}

input editDownloadInput {
    created_by: ID
    updated_by: ID
}

input editFileInput {
    alternativeText: String
    caption: String
    created_by: ID
    ext: String
    formats: JSON
    hash: String
    height: Int
    mime: String
    name: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    related: [ID]
    size: Float
    updated_by: ID
    url: String
    width: Int
}

input editNrcInput {
    approved: Boolean
    confirmed: Boolean
    created_by: ID
    district: ID
    dob: DateTime
    dor: DateTime
    gender: String
    names: String
    nrc: String
    pic_id1: String
    pic_id2: String
    updated_by: ID
    village: String
}

input editProvinceInput {
    created_by: ID
    name: String
    published_at: DateTime
    updated_by: ID
}

input editRoleInput {
    created_by: ID
    description: String
    name: String
    permissions: [ID]
    type: String
    updated_by: ID
    users: [ID]
}

input editUploadedDocumentInput {
    created_by: ID
    name: [ID]
    published_at: DateTime
    updated_by: ID
}

input editUserInput {
    blocked: Boolean
    confirmationToken: String
    confirmed: Boolean
    created_by: ID
    email: String
    password: String
    provider: String
    resetPasswordToken: String
    role: ID
    updated_by: ID
    username: String
}

input updateDistrictInput {
    data: editDistrictInput
    where: InputID
}

input updateDownloadInput {
    data: editDownloadInput
    where: InputID
}

input updateNrcInput {
    data: editNrcInput
    where: InputID
}

input updateProvinceInput {
    data: editProvinceInput
    where: InputID
}

input updateRoleInput {
    data: editRoleInput
    where: InputID
}

input updateUploadedDocumentInput {
    data: editUploadedDocumentInput
    where: InputID
}

input updateUserInput {
    data: editUserInput
    where: InputID
}


"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"A time string with format: HH:mm:ss.SSS"
scalar Time

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"The `Long` scalar type represents 52-bit integers"
scalar Long

"The `Upload` scalar type represents a file upload."
scalar Upload
